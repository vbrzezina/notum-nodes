/* tslint:disable */
/* eslint-disable */
/**
 * Notum nodes
 * ðŸš€ðŸŒ™
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AccessDto,
  LoginDto,
  NodesDto,
  UserDto,
} from '../models';
import {
    AccessDtoFromJSON,
    AccessDtoToJSON,
    LoginDtoFromJSON,
    LoginDtoToJSON,
    NodesDtoFromJSON,
    NodesDtoToJSON,
    UserDtoFromJSON,
    UserDtoToJSON,
} from '../models';

export interface AppControllerLoginRequest {
    LoginDto: LoginDto;
}

export interface AppControllerSaveNodesRequest {
    NodesDto: NodesDto;
}

/**
 * 
 */
export class AppApi extends runtime.BaseAPI {

    /**
     * Fetch information about token.
     */
    async appControllerGetMeRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDtoFromJSON(jsonValue));
    }

    /**
     * Fetch information about token.
     */
    async appControllerGetMe(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDto> {
        const response = await this.appControllerGetMeRaw(initOverrides);
        return await response.value();
    }

    /**
     * Fetch saved nodes.
     */
    async appControllerGetNodesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NodesDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/nodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NodesDtoFromJSON(jsonValue));
    }

    /**
     * Fetch saved nodes.
     */
    async appControllerGetNodes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NodesDto> {
        const response = await this.appControllerGetNodesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Login.
     */
    async appControllerLoginRaw(requestParameters: AppControllerLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccessDto>> {
        if (requestParameters.LoginDto === null || requestParameters.LoginDto === undefined) {
            throw new runtime.RequiredError('LoginDto','Required parameter requestParameters.LoginDto was null or undefined when calling appControllerLogin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginDtoToJSON(requestParameters.LoginDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccessDtoFromJSON(jsonValue));
    }

    /**
     * Login.
     */
    async appControllerLogin(requestParameters: AppControllerLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccessDto> {
        const response = await this.appControllerLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Save all nodes.
     */
    async appControllerSaveNodesRaw(requestParameters: AppControllerSaveNodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NodesDto>> {
        if (requestParameters.NodesDto === null || requestParameters.NodesDto === undefined) {
            throw new runtime.RequiredError('NodesDto','Required parameter requestParameters.NodesDto was null or undefined when calling appControllerSaveNodes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/nodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NodesDtoToJSON(requestParameters.NodesDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NodesDtoFromJSON(jsonValue));
    }

    /**
     * Save all nodes.
     */
    async appControllerSaveNodes(requestParameters: AppControllerSaveNodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NodesDto> {
        const response = await this.appControllerSaveNodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
